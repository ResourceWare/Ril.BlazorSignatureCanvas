@page "/"

<PageTitle>Index</PageTitle>

<div class="flex flex-col items-start gap-8">


<SignatureCanvas
    class="shadow-md rounded border-2 border-blue-300 bg-blue-100"
    @ref=sc id="myCanvas" 
    width="400" height="200"
    @bind-MinLineWidth=@minLineWidth
    @bind-MaxLineWidth=@maxLineWidth
    @bind-PenColor=@penColor
    @bind-Throttle=@throttle
    />

<div class="flex flex-col py-8 gap-4 p-4 shadow-md rounded w-auto bg-green-300" >
    <button class="rounded-full shadow bg-gray-200 hover:bg-gray-300 py-4 py-2" @onclick=ClearSignature>Clear Signature</button>

    <label class="text-center rounded-full shadow bg-gray-200 hover:bg-gray-300 py-4 py-2">Pen Color (@penColor)
        <input @bind-value=penColor type="color">
    </label>

    <button class="rounded-full shadow bg-gray-200 hover:bg-gray-300 py-4 py-2" @onclick=Off>Off</button>
    <button class="rounded-full shadow bg-gray-200 hover:bg-gray-300 py-4 py-2"@onclick=On>On</button>

    <label class="" >
        Min Pen Width 
        <input class="rounded-full p-2 shadow-inner bg-gray-100" type="number" @bind-value=minLineWidth />
    </label>

    <label class=""> 
        Max Line Width
        <input class="rounded-full p-2 shadow-inner bg-gray-100" type="number" @bind-value=maxLineWidth />
    </label>
    <label>
        Throttle
        <input class="rounded-full p-2 shadow-inner bg-gray-100" type="number" @bind-value=throttle />
    </label>
</div>

<button @onclick=RefreshPngImage>Refresh Images</button>
<img src=@pngImage alt="rendered png signature" />
<p>Size of PNG DataURL: @PNGDataURLSize bytes</p>
<p>Size og PNG ByteArray: @PNGByteArraySize bytes</p>
<p>Size of JPEG DataURL: @JPEGDataURLSize bytes</p>
<p>Size og JPEG ByteArray: @JPEGByteArraySize bytes</p>
<p>Size of SVG DataURL: @SVGDataURLSize bytes</p>
<p>Size og SVG ByteArray: @SVGDataURLSize bytes</p>

</div>

@code {
    SignatureCanvas sc;

    string penColor = "#000000";
    float minLineWidth = 2.5f;
    float maxLineWidth = 10f;
    int throttle = 5;
    
    string pngImage = "";

    int PNGDataURLSize = 0;
    int PNGByteArraySize = 0;
    int JPEGDataURLSize = 0;
    int JPEGByteArraySize = 0;
    int SVGDataURLSize = 0;
    int SVGByteArraySize = 0;

    async Task RefreshPngImage() {
        pngImage = await sc.ToDataURL();
        PNGDataURLSize = System.Text.ASCIIEncoding.ASCII.GetByteCount(pngImage);
        var byteArray = await sc.ToByteArray();
        PNGByteArraySize = byteArray.Length;

        string jpg = await sc.ToDataURL("image/jpeg");
        JPEGDataURLSize = System.Text.ASCIIEncoding.ASCII.GetByteCount(jpg);
        var jpgBytes = await sc.ToByteArray("image/jpeg");
        JPEGByteArraySize = jpgBytes.Length;

        string svg = await sc.ToDataURL("image/svg+xml");
        SVGDataURLSize = System.Text.ASCIIEncoding.ASCII.GetByteCount(svg);
        var svgBytes = await sc.ToByteArray("image/svg+xml");
        SVGByteArraySize = svgBytes.Length;
    }
     
    async Task ClearSignature() => await sc.Clear();
    async Task Off() => await sc.Off(); 
    async Task On() => await sc.On();
}